\hypertarget{driver__assistance_8cpp}{}\doxysection{driver\+\_\+assistance.\+cpp File Reference}
\label{driver__assistance_8cpp}\index{driver\_assistance.cpp@{driver\_assistance.cpp}}


Node to drive the robot avoiding obstacles.  


{\ttfamily \#include \char`\"{}ros/ros.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}algorithm\char`\"{}}\newline
{\ttfamily \#include \char`\"{}cmath\char`\"{}}\newline
{\ttfamily \#include \char`\"{}geometry\+\_\+msgs/\+Twist.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}sensor\+\_\+msgs/\+Laser\+Scan.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}final\+\_\+assignment/\+Command.\+h\char`\"{}}\newline
Include dependency graph for driver\+\_\+assistance.\+cpp\+:
% FIG 0
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \mbox{\hyperlink{driver__assistance_8cpp_a91c136bc3c91e4ea7a59bbbc1614109f}{function\+Callback}} (const sensor\+\_\+msgs\+::\+Laser\+Scan\+::\+Const\+Ptr \&msg)
\item 
void \mbox{\hyperlink{driver__assistance_8cpp_ae6c8909be052898336f00323b26d5c36}{scan\+Sectors}} (float $\ast$ranges, float $\ast$sectors)
\item 
int \mbox{\hyperlink{driver__assistance_8cpp_a52631c8fff8878c9a417d113e429f8fb}{logic}} (float $\ast$sectors)
\item 
void \mbox{\hyperlink{driver__assistance_8cpp_a550dc2b19b6710b93b95e10e8c1ad593}{integral\+\_\+logic}} (float $\ast$ranges)
\item 
double \mbox{\hyperlink{driver__assistance_8cpp_a948754fd289e606979801339f15c12aa}{integral}} (float $\ast$values, int start, int end)
\item 
void \mbox{\hyperlink{driver__assistance_8cpp_af5fbee6c549866cdf0a418f4a1b929ca}{drive}} (float straight, float \mbox{\hyperlink{driver__assistance_8cpp_a610313636194c4234b6130ce65c1874b}{turn}})
\item 
bool \mbox{\hyperlink{driver__assistance_8cpp_a5d7a455f1d58eb3e57a53289086ac114}{server\+\_\+response}} (final\+\_\+assignment\+::\+Command\+::\+Request \&req, final\+\_\+assignment\+::\+Command\+::\+Response \&res)
\item 
\mbox{\Hypertarget{driver__assistance_8cpp_a3c04138a5bfe5d72780bb7e82a18e627}\label{driver__assistance_8cpp_a3c04138a5bfe5d72780bb7e82a18e627}} 
int {\bfseries main} (int argc, char $\ast$$\ast$argv)
\end{DoxyCompactItemize}
\doxysubsection*{Variables}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{driver__assistance_8cpp_a407c3efba665d276a38229f905bef352}\label{driver__assistance_8cpp_a407c3efba665d276a38229f905bef352}} 
bool \mbox{\hyperlink{driver__assistance_8cpp_a407c3efba665d276a38229f905bef352}{is\+\_\+active}} = false
\begin{DoxyCompactList}\small\item\em Variable to turn on and off the node. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{driver__assistance_8cpp_acb18293a378c57c1971e2317c62b8af7}\label{driver__assistance_8cpp_acb18293a378c57c1971e2317c62b8af7}} 
float \mbox{\hyperlink{driver__assistance_8cpp_acb18293a378c57c1971e2317c62b8af7}{d\+\_\+br}}
\begin{DoxyCompactList}\small\item\em Alert distance for avoiding obstacles, distance break. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{driver__assistance_8cpp_a7f7e4724cf57d59513b39c5ecc81adc8}\label{driver__assistance_8cpp_a7f7e4724cf57d59513b39c5ecc81adc8}} 
float \mbox{\hyperlink{driver__assistance_8cpp_a7f7e4724cf57d59513b39c5ecc81adc8}{speed}}
\begin{DoxyCompactList}\small\item\em Linear speed of the robot. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{driver__assistance_8cpp_a610313636194c4234b6130ce65c1874b}\label{driver__assistance_8cpp_a610313636194c4234b6130ce65c1874b}} 
float \mbox{\hyperlink{driver__assistance_8cpp_a610313636194c4234b6130ce65c1874b}{turn}}
\begin{DoxyCompactList}\small\item\em Angular speed of the robot. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{driver__assistance_8cpp_a363c840b0a6f4eace19eaeaaf1b3a422}\label{driver__assistance_8cpp_a363c840b0a6f4eace19eaeaaf1b3a422}} 
int \mbox{\hyperlink{driver__assistance_8cpp_a363c840b0a6f4eace19eaeaaf1b3a422}{nsect}} = 9
\begin{DoxyCompactList}\small\item\em Number of sectors. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{driver__assistance_8cpp_ac261b45b6346e633de22d510c9f6a770}\label{driver__assistance_8cpp_ac261b45b6346e633de22d510c9f6a770}} 
int \mbox{\hyperlink{driver__assistance_8cpp_ac261b45b6346e633de22d510c9f6a770}{front}} = std\+::floor( \mbox{\hyperlink{driver__assistance_8cpp_a363c840b0a6f4eace19eaeaaf1b3a422}{nsect}} / 2 )
\begin{DoxyCompactList}\small\item\em Index of the frontal sector. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{driver__assistance_8cpp_a4e2bfb4f8d8f41126e011c2d9d2c3a52}\label{driver__assistance_8cpp_a4e2bfb4f8d8f41126e011c2d9d2c3a52}} 
int \mbox{\hyperlink{driver__assistance_8cpp_a4e2bfb4f8d8f41126e011c2d9d2c3a52}{sector\+\_\+nelem}} = std\+::floor( 720/\mbox{\hyperlink{driver__assistance_8cpp_a363c840b0a6f4eace19eaeaaf1b3a422}{nsect}} )
\begin{DoxyCompactList}\small\item\em Number of laser surveys per sector. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{driver__assistance_8cpp_a350594df3e8f6948c8462edfd41ce086}\label{driver__assistance_8cpp_a350594df3e8f6948c8462edfd41ce086}} 
ros\+::\+Publisher \mbox{\hyperlink{driver__assistance_8cpp_a350594df3e8f6948c8462edfd41ce086}{pub}}
\begin{DoxyCompactList}\small\item\em Publisher on cmd\+\_\+vel. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
Node to drive the robot avoiding obstacles. 

\begin{DoxyAuthor}{Author}
Ettore Sani
\end{DoxyAuthor}
\begin{DoxyVersion}{Version}
1.\+0
\end{DoxyVersion}
\begin{DoxyDate}{Date}
27/02/2022
\end{DoxyDate}
Subscribes to\+: ~\newline
 ° /base\+\_\+scan

Publishes to\+: ~\newline
 ° /my\+\_\+vel

Services \+: ~\newline
 ° /command

Description \+:

This node aims to control the robot in drive assistance mode. Through the service $\ast$ /command $\ast$, the user can increase or decrease the linear and angular velocity of the robot. Reading data from $\ast$ /base\+\_\+scan $\ast$ the robot can know the distance from obstacles; then it is implemented a logic that allows the robot to move without hurting them. 

\doxysubsection{Function Documentation}
\mbox{\Hypertarget{driver__assistance_8cpp_af5fbee6c549866cdf0a418f4a1b929ca}\label{driver__assistance_8cpp_af5fbee6c549866cdf0a418f4a1b929ca}} 
\index{driver\_assistance.cpp@{driver\_assistance.cpp}!drive@{drive}}
\index{drive@{drive}!driver\_assistance.cpp@{driver\_assistance.cpp}}
\doxysubsubsection{\texorpdfstring{drive()}{drive()}}
{\footnotesize\ttfamily void drive (\begin{DoxyParamCaption}\item[{float}]{straight,  }\item[{float}]{turn }\end{DoxyParamCaption})}

Function to drive the robot.


\begin{DoxyParams}{Parameters}
{\em straight} & defines the linear velocity.\\
\hline
{\em turn} & defines the angular velocity.\\
\hline
\end{DoxyParams}
This function fills the geometry message and publishes it on the topic $\ast$ /cmd\+\_\+vel $\ast$.\mbox{\Hypertarget{driver__assistance_8cpp_a91c136bc3c91e4ea7a59bbbc1614109f}\label{driver__assistance_8cpp_a91c136bc3c91e4ea7a59bbbc1614109f}} 
\index{driver\_assistance.cpp@{driver\_assistance.cpp}!functionCallback@{functionCallback}}
\index{functionCallback@{functionCallback}!driver\_assistance.cpp@{driver\_assistance.cpp}}
\doxysubsubsection{\texorpdfstring{functionCallback()}{functionCallback()}}
{\footnotesize\ttfamily void function\+Callback (\begin{DoxyParamCaption}\item[{const sensor\+\_\+msgs\+::\+Laser\+Scan\+::\+Const\+Ptr \&}]{msg }\end{DoxyParamCaption})}

Function callback for the base\+\_\+scan subscriber.


\begin{DoxyParams}{Parameters}
{\em msg} & defines the message of type Laser\+Scan published on the $\ast$ /base\+\_\+scan $\ast$ topic.\\
\hline
\end{DoxyParams}
If the flag is\+\_\+active is true, this function calls the $\ast$ scan\+Sectors $\ast$ function, then the function $\ast$ logic $\ast$ implements the choice made through sectors. If the function $\ast$ logic $\ast$ does not take any decision, then the $\ast$ integral\+\_\+logic $\ast$ function is called.\mbox{\Hypertarget{driver__assistance_8cpp_a948754fd289e606979801339f15c12aa}\label{driver__assistance_8cpp_a948754fd289e606979801339f15c12aa}} 
\index{driver\_assistance.cpp@{driver\_assistance.cpp}!integral@{integral}}
\index{integral@{integral}!driver\_assistance.cpp@{driver\_assistance.cpp}}
\doxysubsubsection{\texorpdfstring{integral()}{integral()}}
{\footnotesize\ttfamily double integral (\begin{DoxyParamCaption}\item[{float $\ast$}]{values,  }\item[{int}]{start,  }\item[{int}]{end }\end{DoxyParamCaption})}

Function to perform a discrete integral with the trapezium method.


\begin{DoxyParams}{Parameters}
{\em values} & defines the vector on which it computes the discrete integral.\\
\hline
{\em start} & defines the index of the initial value.\\
\hline
{\em end} & defines the index of the final value.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
double with the calculated area.
\end{DoxyReturn}
The discrete integral is computed between start and end inclusive.\mbox{\Hypertarget{driver__assistance_8cpp_a550dc2b19b6710b93b95e10e8c1ad593}\label{driver__assistance_8cpp_a550dc2b19b6710b93b95e10e8c1ad593}} 
\index{driver\_assistance.cpp@{driver\_assistance.cpp}!integral\_logic@{integral\_logic}}
\index{integral\_logic@{integral\_logic}!driver\_assistance.cpp@{driver\_assistance.cpp}}
\doxysubsubsection{\texorpdfstring{integral\_logic()}{integral\_logic()}}
{\footnotesize\ttfamily void integral\+\_\+logic (\begin{DoxyParamCaption}\item[{float $\ast$}]{ranges }\end{DoxyParamCaption})}

Function to decide where to go when there are obstales all around the robot.


\begin{DoxyParams}{Parameters}
{\em ranges} & defines the vector provided by the laser scanner.\\
\hline
\end{DoxyParams}
This function implements the second logical part of the code, and it\textquotesingle{}s executed only when the first one can not make any choice. It can only turn the robot, and it does it based on the information included in the ranges vector. It computes the integral (calling the $\ast$ integral $\ast$ function) of the distance on the right-\/side and the left-\/side of the robot, obtaining the left and right area. Lastly, comparing these two values decides where to turn the robot; and calls the $\ast$ drive $\ast$ function to move it.\mbox{\Hypertarget{driver__assistance_8cpp_a52631c8fff8878c9a417d113e429f8fb}\label{driver__assistance_8cpp_a52631c8fff8878c9a417d113e429f8fb}} 
\index{driver\_assistance.cpp@{driver\_assistance.cpp}!logic@{logic}}
\index{logic@{logic}!driver\_assistance.cpp@{driver\_assistance.cpp}}
\doxysubsubsection{\texorpdfstring{logic()}{logic()}}
{\footnotesize\ttfamily int logic (\begin{DoxyParamCaption}\item[{float $\ast$}]{sectors }\end{DoxyParamCaption})}

Function that rapresents the robot\textquotesingle{}s logic implementation.


\begin{DoxyParams}{Parameters}
{\em sectors} & defines the vector of distances.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
1 choice made 0 choice not made
\end{DoxyReturn}
This function implements the logical part of the code, choosing whether to drive the robot forward or to make it turn to avoid obstacles. It\textquotesingle{}s based on the information in the sectors vector, so previously filtered by the scan\+Sector function. According to the choice made, it calls the drive function to move the robot.\mbox{\Hypertarget{driver__assistance_8cpp_ae6c8909be052898336f00323b26d5c36}\label{driver__assistance_8cpp_ae6c8909be052898336f00323b26d5c36}} 
\index{driver\_assistance.cpp@{driver\_assistance.cpp}!scanSectors@{scanSectors}}
\index{scanSectors@{scanSectors}!driver\_assistance.cpp@{driver\_assistance.cpp}}
\doxysubsubsection{\texorpdfstring{scanSectors()}{scanSectors()}}
{\footnotesize\ttfamily void scan\+Sectors (\begin{DoxyParamCaption}\item[{float $\ast$}]{ranges,  }\item[{float $\ast$}]{sectors }\end{DoxyParamCaption})}

Function to search for the closest obstacle in each sector.


\begin{DoxyParams}{Parameters}
{\em ranges} & defines the vector provided by the laser scanner.\\
\hline
{\em sectors} & defines the vector to fill.\\
\hline
\end{DoxyParams}
It fills sectors with the distance of the closest obstacle in this specific sector, searching in the ranges vector.\mbox{\Hypertarget{driver__assistance_8cpp_a5d7a455f1d58eb3e57a53289086ac114}\label{driver__assistance_8cpp_a5d7a455f1d58eb3e57a53289086ac114}} 
\index{driver\_assistance.cpp@{driver\_assistance.cpp}!server\_response@{server\_response}}
\index{server\_response@{server\_response}!driver\_assistance.cpp@{driver\_assistance.cpp}}
\doxysubsubsection{\texorpdfstring{server\_response()}{server\_response()}}
{\footnotesize\ttfamily bool server\+\_\+response (\begin{DoxyParamCaption}\item[{final\+\_\+assignment\+::\+Command\+::\+Request \&}]{req,  }\item[{final\+\_\+assignment\+::\+Command\+::\+Response \&}]{res }\end{DoxyParamCaption})}

Function callback to the $\ast$ /command $\ast$ service.


\begin{DoxyParams}{Parameters}
{\em req} & defines the service\textquotesingle{}s request.\\
\hline
{\em res} & defines the service\textquotesingle{}s response.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
always true.
\end{DoxyReturn}
This function increases or decreases the speed of the motor depending on the message received and replies with the updated velocity. It also updates the robot\textquotesingle{}s distance break\+: which is proportional to its speed.